{
  "author": {
    "name": "Scott González",
    "email": "scott.gonzalez@gmail.com",
    "url": "http://scottgonzalez.com"
  },
  "name": "wordpress",
  "description": "A client for working with WordPress.",
  "version": "1.0.0",
  "homepage": "https://github.com/scottgonzalez/node-wordpress",
  "repository": {
    "type": "git",
    "url": "git://github.com/scottgonzalez/node-wordpress.git"
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "xmlrpc": "1.0.1"
  },
  "devDependencies": {
    "grunt": "0.3.x"
  },
  "main": "lib/wordpress.js",
  "readme": "# node-wordpress\n\nA node.js JavaScript client for working with WordPress.\n\nSupport this project by [donating on Gittip](https://www.gittip.com/scottgonzalez/).\n\nRequires WordPress 3.4 or newer (uses the [WordPress XML-RPC API](http://codex.wordpress.org/XML-RPC_WordPress_API)).\n\n\n\n## Installation\n\n```\nnpm install wordpress\n```\n\n\n\n## Usage\n\n```js\nvar wordpress = require( \"wordpress\" );\nvar client = wordpress.createClient({\n\turl: \"my-site.com\",\n\tusername: \"admin\",\n\tpassword: \"secret\"\n});\n\nclient.getPosts(function( error, posts ) {\n\tconsole.log( \"Found \" + posts.length + \" posts!\" );\n});\n```\n\n\n\n## API\n\n### Client\n\n#### wordpress.createClient( settings )\n\nCreates a new client instance.\n\n* `settings`: A hash of settings that apply to all requests for the new client.\n  * `username`: The username for the WordPress account.\n  * `password`: The password for the WordPress account.\n  * `url`: The URL for the WordPress install.\n  * `host` (optional): The actual host to connect to if different from the URL, e.g., when deploying to a local server behind a firewall.\n  * `blogId` (optional; default: `0`): The blog ID for the WordPress install.\n\n#### wordpress.Client\n\nThe constructor used for client connections. Useful for creating extensions.\n\n### Posts\n\n#### client.getPost( id [, fields], callback )\n\nGets a post by ID.\n\n* `id`: The ID of the post to get.\n* `fields` (optional): An array of fields to return.\n* `callback` (`function( error, post )`): A callback to invoke when the API call is complete.\n  * `post`: An object containing the post data.\n\n#### client.getPosts( [filter] [, fields], callback )\n\nGets all posts, optionally filtered.\n\n* `filter` (optional): A hash of key/value pairs for filtering which posts to get.\n* `fields` (optional): An array of fields to return.\n* `callback` (`function( error, posts )`): A callback to invoke when the API call is complete.\n  * `posts`: An array containing the posts.\n\n#### client.newPost( data, callback )\n\nCreates a new post.\n\n* `data`: The data for the new post.\n* `callback` (`function( error, id )`): A callback to invoke when the API call is complete.\n  * `id`: The ID of the new post.\n\n#### client.editPost( id, data, callback )\n\nEdits an existing post.\n\n* `id`: The ID of the post to edit.\n* `data`: The data to update on the post.\n* `callback` (`function( error )`): A callback to invoke when the API call is complete.\n\n#### client.deletePost( id, callback )\n\nDeletes a post.\n\n*NOTE:* Deleting a pot may move it to the trash and then deleting a second time will actually delete.\n\n* `id`: The ID of the post to delete.\n* `callback` (`function( error )`): A callback to invoke when the API call is complete.\n\n#### client.getPostType( name, callback )\n\nGets a post type by name.\n\n* `name`: The name of the post type to get.\n* `callback` (`function( error, postType )`): A callback to invoke when the API call is complete.\n  * `postType`: An object containing the post type data.\n\n#### client.getPostTypes( callback )\n\nGets all post types.\n\n* `callback` (`function( error, postTypes )`): A callback to invoke when the API call is complete.\n  * `postTypes`: An array containing the post types.\n\n### Taxonomies\n\n#### client.getTaxonomy( name, callback )\n\nGets a taxonomy by name.\n\n* `name`: The name of the taxonomy to get.\n* `callback` (`function( error, taxonomy )`): A callback to invoke when the API call is complete.\n  * `taxonomy`: An object containing the taxonomy data.\n\n#### client.getTaxonomies( callback )\n\nGets all taxonomies.\n\n* `callback` (`function( error, taxonomies )`): A callback to invoke when the API call is complete.\n  * `taxonomies`: An array containing the taxonomies.\n\n#### client.getTerm( taxonomy, id, callback )\n\nGets a taxonomy term by ID.\n\n* `taxonomy`: The name fo the taxonomy the term belongs to.\n* `id`: The ID of the term to get.\n* `callback` (`function( error, term )`): A callback to invoke when the API call is complete.\n  * `term`: An object containing the taxonomy term data.\n\n#### client.getTerms( taxonomy [, fields], callback )\n\nGets all taxonomy terms.\n\n* `taxonomy`: The name fo the taxonomy the term belongs to.\n* `fields` (optional): An array of fields to return.\n* `callback` (`function( error, terms )`): A callback to invoke when the API call is complete.\n  * `terms`: An array containing the taxonomy terms.\n\n#### client.newTerm( data, callback )\n\nCreates a new taxonomy term.\n\n* `data`: The data for the new taxonomy term.\n* `callback` (`function( error, id )`): A callback to invoke when the API call is complete.\n  * `id`: The ID of the new taxonomy term.\n\n#### client.editTerm( id, data, callback )\n\nEdits an existing taxonomy term.\n\n* `id`: The ID of the taxonomy term to edit.\n* `data`: The data to update on the taxonomy.\n* `callback` (`function( error )`): A callback to invoke when the API call is complete.\n\n#### client.deleteTerm( taxonomy, id, callback )\n\nDeletes a taxonomy term.\n\n* `taxonomy`: The name fo the taxonomy the term belongs to.\n* `id`: The ID of the taxonomy term to delete.\n* `callback` (`function( error )`): A callback to invoke when the API call is complete.\n\n### Utilities\n\n#### client.listMethods( callback )\n\nGets a list of all avaialble methods.\n\n* `callback` (`function( error, methods )`): A callback to invoke when the API call is complete.\n  * `methods`: An array of methods.\n\n#### client.call( method [, args... ], callback )\n\nInvokes a method.\n\n* `method`: The method to call.\n* `args` (optional): Arguments to pass to the method.\n* `callback` (`function( error [, data] )`): A callback to invoke when the API call is complete.\n  * `data`: Data returned by the method.\n\n\n#### client.authenticatedCall( method [, args... ], callback )\n\nInvokes a method with the username and password provided by the client.\n\n* `method`: The method to call.\n* `args` (optional): Arguments to pass to the method.\n* `callback` (`function( error [, data] )`): A callback to invoke when the API call is complete.\n* `data`: Data returned by the method.\n\n\n\n## License\n\nCopyright 2014 Scott González. Released under the terms of the MIT license.\n\n---\n\nSupport this project by [donating on Gittip](https://www.gittip.com/scottgonzalez/).\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/scottgonzalez/node-wordpress/issues"
  },
  "_id": "wordpress@1.0.0",
  "dist": {
    "shasum": "be75a361372015f2bdeaf2192e344e281db7197f"
  },
  "_from": "wordpress@",
  "_resolved": "https://registry.npmjs.org/wordpress/-/wordpress-1.0.0.tgz"
}
